export const enum python {
  'identifier' = 1,
  ';' = 2,
  'import' = 3,
  '.' = 4,
  'from' = 5,
  '__future__' = 6,
  '(' = 7,
  ')' = 8,
  ',' = 9,
  'as' = 10,
  '*' = 11,
  'print' = 12,
  '>>' = 13,
  'assert' = 14,
  ':=' = 15,
  'return' = 16,
  'del' = 17,
  'raise' = 18,
  'pass' = 19,
  'break' = 20,
  'continue' = 21,
  'if' = 22,
  ':' = 23,
  'elif' = 24,
  'else' = 25,
  'match' = 26,
  'case' = 27,
  'async' = 28,
  'for' = 29,
  'in' = 30,
  'while' = 31,
  'try' = 32,
  'except' = 33,
  'except*' = 34,
  'finally' = 35,
  'with' = 36,
  'def' = 37,
  '->' = 38,
  '**' = 39,
  'global' = 40,
  'nonlocal' = 41,
  'exec' = 42,
  'type' = 209,
  '=' = 44,
  'class' = 45,
  '[' = 46,
  ']' = 47,
  '@' = 48,
  '-' = 49,
  '_' = 50,
  '|' = 51,
  '{' = 52,
  '}' = 53,
  '+' = 54,
  'not' = 55,
  'and' = 56,
  'or' = 57,
  '/' = 58,
  '%' = 59,
  '//' = 60,
  '&' = 61,
  '^' = 62,
  '<<' = 63,
  '~' = 64,
  'is' = 65,
  '<' = 66,
  '<=' = 67,
  '==' = 68,
  '!=' = 69,
  '>=' = 70,
  '>' = 71,
  '<>' = 72,
  'lambda' = 197,
  '+=' = 74,
  '-=' = 75,
  '*=' = 76,
  '/=' = 77,
  '@=' = 78,
  '//=' = 79,
  '%=' = 80,
  '**=' = 81,
  '>>=' = 82,
  '<<=' = 83,
  '&=' = 84,
  '^=' = 85,
  '|=' = 86,
  'yield' = 203,
  'ellipsis' = 88,
  'escape_sequence' = 89,
  '\\' = 90,
  'type_conversion' = 92,
  'integer' = 93,
  'float' = 94,
  'await' = 238,
  'true' = 96,
  'false' = 97,
  'none' = 98,
  'comment' = 99,
  'line_continuation' = 100,
  'string_start' = 104,
  'escape_interpolation' = 106,
  'string_end' = 107,
  'module' = 108,
  'import_statement' = 111,
  'import_prefix' = 112,
  'relative_import' = 113,
  'future_import_statement' = 114,
  'import_from_statement' = 115,
  'aliased_import' = 117,
  'wildcard_import' = 118,
  'print_statement' = 119,
  'chevron' = 120,
  'assert_statement' = 121,
  'expression_statement' = 122,
  'named_expression' = 123,
  'return_statement' = 125,
  'delete_statement' = 126,
  'raise_statement' = 127,
  'pass_statement' = 128,
  'break_statement' = 129,
  'continue_statement' = 130,
  'if_statement' = 131,
  'elif_clause' = 132,
  'else_clause' = 133,
  'match_statement' = 134,
  'block' = 161,
  'case_clause' = 136,
  'for_statement' = 137,
  'while_statement' = 138,
  'try_statement' = 139,
  'except_clause' = 140,
  'except_group_clause' = 141,
  'finally_clause' = 142,
  'with_statement' = 143,
  'with_clause' = 144,
  'with_item' = 145,
  'function_definition' = 146,
  'parameters' = 147,
  'lambda_parameters' = 148,
  'list_splat' = 149,
  'dictionary_splat' = 150,
  'global_statement' = 151,
  'nonlocal_statement' = 152,
  'exec_statement' = 153,
  'type_alias_statement' = 154,
  'class_definition' = 155,
  'type_parameter' = 156,
  'parenthesized_list_splat' = 157,
  'argument_list' = 158,
  'decorated_definition' = 159,
  'decorator' = 160,
  'expression_list' = 162,
  'dotted_name' = 163,
  'case_pattern' = 164,
  'as_pattern' = 186,
  'union_pattern' = 167,
  'list_pattern' = 181,
  'tuple_pattern' = 180,
  'dict_pattern' = 170,
  'keyword_pattern' = 172,
  'splat_pattern' = 173,
  'class_pattern' = 174,
  'complex_pattern' = 175,
  'default_parameter' = 182,
  'typed_default_parameter' = 183,
  'list_splat_pattern' = 184,
  'dictionary_splat_pattern' = 185,
  'not_operator' = 190,
  'boolean_operator' = 191,
  'binary_operator' = 192,
  'unary_operator' = 193,
  'not in' = 194,
  'is not' = 195,
  'comparison_operator' = 196,
  'assignment' = 199,
  'augmented_assignment' = 200,
  'pattern_list' = 201,
  'attribute' = 204,
  'subscript' = 205,
  'slice' = 206,
  'call' = 207,
  'typed_parameter' = 208,
  'splat_type' = 210,
  'generic_type' = 211,
  'union_type' = 212,
  'constrained_type' = 213,
  'member_type' = 214,
  'keyword_argument' = 215,
  'list' = 216,
  'set' = 217,
  'tuple' = 218,
  'dictionary' = 219,
  'pair' = 220,
  'list_comprehension' = 221,
  'dictionary_comprehension' = 222,
  'set_comprehension' = 223,
  'generator_expression' = 224,
  'parenthesized_expression' = 226,
  'for_in_clause' = 228,
  'if_clause' = 229,
  'conditional_expression' = 230,
  'concatenated_string' = 231,
  'string' = 232,
  'string_content' = 233,
  'interpolation' = 234,
  'format_specifier' = 237,
  'positional_separator' = 239,
  'keyword_separator' = 240,
  'as_pattern_target' = 273,
  'format_expression' = 274,
}
