export const enum go {
  'identifier' = 1,
  ';' = 3,

  'package' = 5,
  'import' = 6,
  '.' = 7,
  'blank_identifier' = 8,
  '(' = 9,
  ')' = 10,
  'const' = 11,
  ',' = 12,
  '=' = 13,
  'var' = 14,
  'func' = 15,
  '[' = 16,
  ']' = 17,
  '...' = 18,
  'type' = 19,
  '*' = 20,
  'struct' = 21,
  '~' = 22,
  '{' = 23,
  '}' = 24,
  'interface' = 25,
  '|' = 26,
  'map' = 27,
  'chan' = 28,
  '<-' = 29,
  ':=' = 30,
  '++' = 31,
  '--' = 32,
  '*=' = 33,
  '/=' = 34,
  '%=' = 35,
  '<<=' = 36,
  '>>=' = 37,
  '&=' = 38,
  '&^=' = 39,
  '+=' = 40,
  '-=' = 41,
  '|=' = 42,
  '^=' = 43,
  ':' = 44,
  'fallthrough' = 45,
  'break' = 46,
  'continue' = 47,
  'goto' = 48,
  'return' = 49,
  'go' = 50,
  'defer' = 51,
  'if' = 52,
  'else' = 53,
  'for' = 54,
  'range' = 55,
  'switch' = 56,
  'case' = 57,
  'default' = 58,
  'select' = 59,
  '+' = 62,
  '-' = 63,
  '!' = 64,
  '^' = 65,
  '&' = 66,
  '/' = 67,
  '%' = 68,
  '<<' = 69,
  '>>' = 70,
  '&^' = 71,
  '==' = 72,
  '!=' = 73,
  '<' = 74,
  '<=' = 75,
  '>' = 76,
  '>=' = 77,
  '&&' = 78,
  '||' = 79,
  'raw_string_literal' = 80,
  '"' = 81,
  'escape_sequence' = 84,
  'int_literal' = 85,
  'float_literal' = 86,
  'imaginary_literal' = 87,
  'rune_literal' = 88,
  'nil' = 89,
  'true' = 90,
  'false' = 91,
  'iota' = 92,
  'comment' = 93,
  'source_file' = 94,
  'package_clause' = 95,
  'import_declaration' = 96,
  'import_spec' = 97,
  'dot' = 98,
  'import_spec_list' = 99,
  'const_declaration' = 101,
  'const_spec' = 102,
  'var_declaration' = 103,
  'var_spec' = 104,
  'var_spec_list' = 105,
  'function_declaration' = 106,
  'method_declaration' = 107,
  'type_parameter_list' = 108,
  'type_parameter_declaration' = 109,
  'parameter_list' = 110,
  'parameter_declaration' = 111,
  'variadic_parameter_declaration' = 112,
  'type_alias' = 113,
  'type_declaration' = 114,
  'type_spec' = 115,
  'expression_list' = 116,
  'parenthesized_type' = 117,
  'generic_type' = 119,
  'type_arguments' = 120,
  'pointer_type' = 121,
  'array_type' = 122,
  'implicit_length_array_type' = 123,
  'slice_type' = 124,
  'struct_type' = 125,
  'negated_type' = 126,
  'field_declaration_list' = 127,
  'field_declaration' = 128,
  'interface_type' = 129,
  'method_elem' = 130,
  'type_elem' = 131,
  'map_type' = 132,
  'channel_type' = 133,
  'function_type' = 134,
  'block' = 135,
  'empty_statement' = 138,
  'expression_statement' = 140,
  'send_statement' = 141,
  'receive_statement' = 142,
  'inc_statement' = 143,
  'dec_statement' = 144,
  'assignment_statement' = 145,
  'short_var_declaration' = 146,
  'labeled_statement' = 147,
  'fallthrough_statement' = 149,
  'break_statement' = 150,
  'continue_statement' = 151,
  'goto_statement' = 152,
  'return_statement' = 153,
  'go_statement' = 154,
  'defer_statement' = 155,
  'if_statement' = 156,
  'for_statement' = 157,
  'for_clause' = 158,
  'range_clause' = 159,
  'expression_switch_statement' = 160,
  'expression_case' = 161,
  'default_case' = 162,
  'type_switch_statement' = 163,
  'type_case' = 165,
  'select_statement' = 166,
  'communication_case' = 167,
  'parenthesized_expression' = 169,
  'call_expression' = 170,
  'variadic_argument' = 171,
  'argument_list' = 173,
  'selector_expression' = 174,
  'index_expression' = 175,
  'slice_expression' = 176,
  'type_assertion_expression' = 177,
  'type_conversion_expression' = 178,
  'type_instantiation_expression' = 179,
  'composite_literal' = 180,
  'literal_value' = 181,
  'literal_element' = 182,
  'keyed_element' = 183,
  'func_literal' = 184,
  'unary_expression' = 185,
  'binary_expression' = 186,
  'qualified_type' = 187,
  'interpreted_string_literal' = 188,
  'field_identifier' = 212,
  'label_name' = 213,
  'package_identifier' = 214,
  'type_constraint' = 215,
  'type_identifier' = 216,
}
