{
  "JSX property": {
    "body": "$1={${2:$1}}",
    "description": "JSX property",
    "prefix": "x",
    "scope": "javascriptreact,typescriptreact"
  },
  "React Class Component (with Props)": {
    "body": [
      "type $1Props = {}",
      "type $1State = {}",
      "class ${1:$TM_FILENAME_BASE} extends ${2|Component,PureComponent|}<$1Props, $1State> {",
      "\tstate = {",
      "\t\t$3",
      "\t},",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t)",
      "\t}",
      "}"
    ],
    "description": "React Class Component (with Props)",
    "prefix": "rcc",
    "scope": "typescriptreact"
  },
  "React createContext": {
    "body": "const ${1:theme}Context = createContext<$3>($2)",
    "description": "React createContext",
    "prefix": "rctx",
    "scope": "typescriptreact"
  },
  "React File Template: Class Component (with Props)": {
    "body": [
      "import React, { Component, PureComponent } from 'react'",
      "",
      "type $1Props = {}",
      "type $1State = {}",
      "export default class ${1:$TM_FILENAME_BASE} extends ${2|Component,PureComponent|}<$1Props, $1State> {",
      "\tstate = {",
      "\t\t$3",
      "\t},",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t)",
      "\t}",
      "}"
    ],
    "description": "React File Template: Class Component (with Props)",
    "isFileTemplate": true,
    "prefix": "!rcc",
    "scope": "typescriptreact"
  },
  "React File Template: FC": {
    "body": [
      "const ${1:$TM_FILENAME_BASE}: FC<$2> = ($3) => {",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "}",
      "export default $1"
    ],
    "description": "React File Template: FC",
    "isFileTemplate": true,
    "prefix": "!rfc",
    "scope": "typescriptreact"
  },
  "React FC": {
    "body": [
      "const ${1:$TM_FILENAME_BASE}: FC<$2> = ($3) => {",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "}"
    ],
    "description": "React FC",
    "prefix": "rfc",
    "scope": "typescriptreact"
  },
  "React forwardRef FC": {
    "body": [
      "const ${1:$TM_FILENAME_BASE}: FC<$2> = forwardRef(${3:childrenRef}, ($4) => {",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "})",
      ""
    ],
    "description": "React forwardRef FC",
    "prefix": "rffc",
    "scope": "typescriptreact"
  },
  "React memo FC": {
    "body": [
      "const ${1:$TM_FILENAME_BASE}: FC<$2> = memo(($3) => {",
      "\treturn (",
      "\t\t$0",
      "\t)",
      "})",
      ""
    ],
    "description": "React memo FC",
    "prefix": "rmfc",
    "scope": "typescriptreact"
  },
  "React Profiler onRender Function": {
    "body": [
      "function onRender(id, phase, actualDuration, baseDuration, startTime, commitTime) {",
      "\t$0",
      "}"
    ],
    "description": "React Profiler onRender Function",
    "prefix": "ronr",
    "scope": "javascriptreact,typescriptreact"
  },
  "React startTransition": {
    "body": "startTransition(() => {\n\t$0\n}",
    "description": "React startTransition",
    "prefix": "rstt",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useCallback": {
    "body": [
      "const ${1:handleClick} = useCallback(($3) => {",
      "\t$0",
      "}, [$2])"
    ],
    "description": "React useCallback",
    "prefix": "uscb",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useContext": {
    "body": "const $1 = useContext(${1/.+/${0:/pascalcase}/}Context)",
    "description": "React useContext",
    "prefix": "usct",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useDeferredValue": {
    "body": ["const $2 = useDeferredValue($1)"],
    "description": "React useDeferredValue",
    "prefix": "usdv",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useEffect": {
    "body": "useEffect(() => {\n\t$0\n}, [$1])",
    "description": "React useEffect",
    "prefix": "usef",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useImperativeHandle": {
    "body": [
      "const ${1:inputRef} = useRef<${2:HTMLInputElement}>(null)",
      "",
      "useImperativeHandle($1, () => ({",
      "\t$4() {",
      "\t\t$0",
      "\t}",
      "}), [$3])",
      ""
    ],
    "description": "React useImperativeHandle",
    "prefix": "usih",
    "scope": "typescriptreact"
  },
  "React useImperativeHandle in JavaScript": {
    "body": [
      "const ${1:inputRef} = useRef(null)",
      "",
      "useImperativeHandle($1, () => ({",
      "\t$3() {",
      "\t\t$0",
      "\t}",
      "}), [$2])",
      ""
    ],
    "description": "React useImperativeHandle in JavaScript",
    "prefix": "usih",
    "scope": "javascriptreact"
  },
  "React useInsertionEffect": {
    "body": "useInsertionEffect(() => {\n\t$0\n}, [$1])",
    "description": "React useInsertionEffect",
    "prefix": "usie",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useLayoutEffect": {
    "body": "useLayoutEffect(() => {\n\t$0\n}, [$1])",
    "description": "React useLayoutEffect",
    "prefix": "usle",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useMemo": {
    "body": "const $1 = useMemo(() => $0, [$2])",
    "description": "React useMemo",
    "prefix": "usmm",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useReducer": {
    "body": [
      "function reducer($2) {",
      "\t$0",
      "}",
      "const [state, dispatch] = useReducer(reducer, $1})"
    ],
    "description": "React useReducer",
    "prefix": "usrd",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useRef": {
    "body": "const ${1:inputRef} = useRef<${2:HTMLInputElement}>(null)",
    "description": "React useRef",
    "prefix": "usrf",
    "scope": "typescriptreact"
  },
  "React useRef in JavaScript": {
    "body": "const ${1:inputRef} = useRef(null)",
    "description": "React useRef in JavaScript",
    "prefix": "usrf",
    "scope": "javascriptreact"
  },
  "React useState": {
    "body": "const [$1, set${1/.+/${0:/pascalcase}/}] = useState<$3>($2)",
    "description": "React useState",
    "prefix": "usst",
    "scope": "typescriptreact"
  },
  "React useState in JavaScript": {
    "body": "const [$1, set${1/.+/${0:/pascalcase}/}] = useState($2)",
    "description": "React useState in JavaScript",
    "prefix": "usst",
    "scope": "javascriptreact"
  },
  "React useSyncExternalStorage": {
    "body": "const ${1:store} = useSyncExternalStorage(() => {\n\t$0\n}, ${2:get${1/.+/${0:/pascalcase}/})",
    "description": "React useSyncExternalStorage",
    "prefix": "uses",
    "scope": "javascriptreact,typescriptreact"
  },
  "React useTransition": {
    "body": "const [${1:isPending}, ${2:startTransition}] = useTransition()",
    "description": "React useTransition",
    "prefix": "usts",
    "scope": "javascriptreact,typescriptreact"
  }
}
