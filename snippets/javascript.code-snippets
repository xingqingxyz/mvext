// cSpell:dictionaries typescript
{
  "Arrow Function Statement": {
    "body": "const ${1:$TM_FILENAME_BASE} = ($2) => {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Arrow Function Statement",
    "prefix": "af",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Arrow Function": {
    "body": "($1) => ",
    "description": "Arrow Function",
    "prefix": "a",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Arrow Function Class or Object Property": {
    "body": "$1: ($2) => {\n\t$0\n},",
    "description": "Arrow Function Class or Object Property",
    "prefix": "ap",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Arrow Function Destructing (Object)": {
    "body": "({ $1 }) => {\n\t$0\n}",
    "description": "Arrow Function Destructing (Object)",
    "prefix": "ad",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Arrow Function Destructing Array": {
    "body": "([$1]) => {\n\t$0\n}",
    "description": "Arrow Function Destructing Array",
    "prefix": "ada",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Arrow Function Object": {
    "body": "($1) => ({$0})",
    "description": "Arrow Function Object",
    "prefix": "ao",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Arrow Function Value Expression": {
    "body": "($1) => (${0:$TM_SELECTED_TEXT})",
    "description": "Arrow Function Value Expression",
    "prefix": "av",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Async Arrow Function": {
    "body": "async ($1) => {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Async Arrow Function",
    "prefix": "aa",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Async Arrow Function Class or Object Property": {
    "body": "$1: async ($2) => {\n\t$0\n},",
    "description": "Async Arrow Function Class or Object Property",
    "prefix": "aap",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Async Arrow Function Statement": {
    "body": "const ${1:$TM_FILENAME_BASE} = async ($2) => {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Async Arrow Function Statement",
    "prefix": "aaf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Async Class Method or Instance Method": {
    "body": "async $1($2) {\n\t$0\n}",
    "description": "Async Class Method or Instance Method",
    "prefix": "am",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Async Function Statement": {
    "body": "async function ${1:$TM_FILENAME_BASE}($2) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Async Function Statement",
    "prefix": "afn",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block Comments (Inline Only)": {
    "body": ["/*${1|html,css,#__PURE__|}*/"],
    "description": "Collections of Useful Inline Block Comments",
    "prefix": "bcom",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: do while": {
    "body": "do {\n\t${0:$TM_SELECTED_TEXT}\n} while ($1)",
    "description": "Block: do while",
    "prefix": "dwh",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: else": {
    "body": "else {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: else",
    "prefix": "els",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: else if": {
    "body": "else if ($1) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: else if",
    "prefix": "eli",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for await of": {
    "body": "for await (${1|const,let,var|} $2 of $3) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for await of",
    "prefix": "faf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for i": {
    "body": "for (let ${1:i} = 0; $1 < $2; $1++) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for i",
    "prefix": "fri",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for i (reversed)": {
    "body": "for (let ${1:i} = $2; $1 > -1; $1--) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for i (reversed)",
    "prefix": "frr",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for in": {
    "body": "for (${1|const,let,var|} ${2:key} in $3) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for in",
    "prefix": "fin",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for loop while": {
    "body": "for ($1; $2; $3) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for loop while",
    "prefix": "flw",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for of": {
    "body": "for (${1|const,let,var|} $2 of $3) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for of",
    "prefix": "fof",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: for of Object.entries": {
    "body": "for (${1|const,let,var|} [${2:key}, ${3:value}] of Object.entries($4)) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: for of Object.entries",
    "prefix": "foe",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: if (else if) else": {
    "body": "if ($1) {\n\t${0:$TM_SELECTED_TEXT}\n} else if ($2) {\n\t\n} else {\n\t\n}",
    "description": "Block: if (else if) else",
    "prefix": "ifl",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: if not": {
    "body": "if (!($1)) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: if not",
    "prefix": "ifn",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: if not null": {
    "body": "if ($1 !== null) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: if not null",
    "prefix": "ifnn",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: if not undefined": {
    "body": "if ($1 !== undefined) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: if not undefined",
    "prefix": "ifnu",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: try catch": {
    "body": "try {\n\t${1:$TM_SELECTED_TEXT}\n} catch (err) {\n\t$0\n}",
    "description": "Block: try catch",
    "prefix": "trc",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: try catch finally": {
    "body": "try {\n\t${1:$TM_SELECTED_TEXT}\n} catch (err) {\n\t$0\n} finally {\n\t$2\n}",
    "description": "Block: try catch finally",
    "prefix": "trcf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: try finally": {
    "body": "try {\n\t${1:$TM_SELECTED_TEXT}\n} finally {\n\t$0\n}",
    "description": "Block: try finally",
    "prefix": "trf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Block: while": {
    "body": "while ($1) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Block: while",
    "prefix": "wh",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Class Statement": {
    "body": "class ${1:$TM_FILENAME_BASE} {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Class Statement",
    "prefix": "cla",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Const Statement": {
    "body": "const ",
    "description": "Const Statement",
    "prefix": "c",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Destructing Array": {
    "body": "const [${1:first}] = ",
    "description": "Destructing Array",
    "prefix": "dar",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Destructing Expression": {
    "body": "${1|[,{|} $2 ${1/(\\[?)(\\{?)/${1:+]}${2:+\\}}/} = $1\n\t$TM_SELECTED_TEXT$3\n${1/(\\[?)(\\{?)/${1:+]}${2:+\\}}/}",
    "description": "From Array to Array or from Object to Object",
    "prefix": "dex",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Destructing Object": {
    "body": "const { $2 } = $1",
    "description": "Destructing Object",
    "prefix": "dob",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Dynamic Import": {
    "body": "import('$1')",
    "description": "Dynamic Import",
    "prefix": "imp",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Dynamic Require": {
    "body": "require('$1')",
    "description": "Dynamic Require",
    "prefix": "rqr",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Export Default Statement": {
    "body": "export default ",
    "description": "Export Default Statement",
    "prefix": "ed",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Function Expression": {
    "body": "function ($1) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Function Expression",
    "prefix": "f",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Function Header": {
    "body": "${1|function,function*,async function,async function*,export function,export function*,export async function,export async function*,export default function,export default function*,export default async function,export default async function*|}",
    "description": "Function Header",
    "prefix": "fh",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Function Statement": {
    "body": "function ${1:$TM_FILENAME_BASE}($2) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Function Statement",
    "prefix": "fn",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "IIFE": {
    "body": "(${1|function,function*,async function,async function*|} ($2) {\n\t${0:$TM_SELECTED_TEXT}})()",
    "description": "IIFE",
    "prefix": "iife",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Import Statement": {
    "body": "import { $2 } from '$1'",
    "description": "Import Statement",
    "prefix": "im",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "JSDoc": {
    "body": [
      "/**",
      " * Description: ${1:None}",
      " * File: $TM_FILENAME",
      " * Time: $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      " * Authors: (Ming.Chen https://github.com/xingqingxyz cm.email@qq.com)",
      " */",
      ""
    ],
    "description": "Write JSDoc for file",
    "isFileTemplate": true,
    "prefix": "!jsdoc",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Logic AND Expression": {
    "body": "(${1:$TM_SELECTED_TEXT} && $2)",
    "description": "Logic AND Expression",
    "prefix": "and",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Logic EQUAL Expression": {
    "body": "(${1:$TM_SELECTED_TEXT} === $2)",
    "description": "Logic EQUAL Expression",
    "prefix": "eq",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Logic NOT EQUAL Expression": {
    "body": "(${1:$TM_SELECTED_TEXT} !== $2)",
    "description": "Logic NOT EQUAL Expression",
    "prefix": "ne",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Logic OR Expression": {
    "body": "(${1:$TM_SELECTED_TEXT} || $2)",
    "description": "Logic OR Expression",
    "prefix": "or",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.assert": {
    "body": "console.assert($1)",
    "description": "Method: console.assert",
    "prefix": "css",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.clear": {
    "body": "console.clear()",
    "description": "Method: console.clear",
    "prefix": "ccl",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.count": {
    "body": "console.count($1)",
    "description": "Method: console.count",
    "prefix": "cco",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.debug": {
    "body": "console.debug($1)",
    "description": "Method: console.debug",
    "prefix": "cdb",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.dir": {
    "body": "console.dir()",
    "description": "Method: console.dir",
    "prefix": "cd",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.error": {
    "body": "console.error($1)",
    "description": "Method: console.error",
    "prefix": "ce",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.info": {
    "body": "console.info($1)",
    "description": "Method: console.info",
    "prefix": "cin",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.log": {
    "body": "console.log(${1:$TM_SELECTED_TEXT})",
    "description": "Method: console.log",
    "prefix": "cl",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.table": {
    "body": "console.table($1)",
    "description": "Method: console.table",
    "prefix": "ctb",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.time": {
    "body": "console.time($1)",
    "description": "Method: console.time",
    "prefix": "cti",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.timeEnd": {
    "body": "console.timeEnd($1)",
    "description": "Method: console.timeEnd",
    "prefix": "cte",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.trace": {
    "body": "console.trace($1)",
    "description": "Method: console.trace",
    "prefix": "ctr",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: console.warn": {
    "body": "console.warn($1)",
    "description": "Method: console.warn",
    "prefix": "cwa",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Method: module.exports": {
    "body": "module.exports = {\n\t$0\n}",
    "description": "Method: module.exports",
    "prefix": "mde",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "New Promise": {
    "body": "new Promise((resolve, reject) => {\n\t$0\n})",
    "description": "New Promise",
    "prefix": "npm",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "New Proxy": {
    "body": [
      "new Proxy($1, {",
      "\tget(target, key) {",
      "\t\t$0",
      "\t},",
      "\tset(target, key, value) {",
      "\t\t",
      "\t}",
      "})"
    ],
    "description": "New Proxy",
    "prefix": "npx",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "NonNullable Merge Operator": {
    "body": "${1:($TM_SELECTED_TEXT} ?? $2)",
    "description": "NonNullable Merge Operator",
    "prefix": "nnul",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Operator: instanceof": {
    "body": "instanceof ",
    "description": "Operator: instanceof",
    "prefix": "iof",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Operator: typeof": {
    "body": "typeof ",
    "description": "Operator: typeof",
    "prefix": "tof",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Property Array": {
    "body": "$1: [$2],",
    "description": "Property Array",
    "prefix": "pa",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Property Object": {
    "body": "$1: {\n\t$2\n},",
    "description": "Property Object",
    "prefix": "po",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Property Value": {
    "body": "$1: $2,",
    "description": "Property Value",
    "prefix": "p",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Quote Comma": {
    "body": "'$1',",
    "description": "Quote Comma",
    "prefix": "q",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Require Destructing": {
    "body": "const { $2 } = require('$1')",
    "description": "Require Destructing",
    "prefix": "rqd",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Require Statement": {
    "body": "const ${2:$1} = require('$1')",
    "description": "Require Statement",
    "prefix": "rq",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Set Interval Timer": {
    "body": "setInterval(() => {\n\t${0:$TM_SELECTED_TEXT}\n}, ${1:1000})",
    "description": "Set Interval Timer",
    "prefix": "sti",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Set Timeout Timer": {
    "body": "setTimeout(() => {\n\t${0:$TM_SELECTED_TEXT}\n}, ${1:0})",
    "description": "Set Timeout Timer",
    "prefix": "sto",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export default arrow function": {
    "body": "const ${1:$TM_FILENAME_BASE} = ($2) => {\n\t${0:$TM_SELECTED_TEXT}\n}\nexport default $1",
    "description": "Statement: export default arrow function",
    "prefix": "eda",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export default class": {
    "body": "export default class ${1:$TM_FILENAME_BASE} {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Statement: export default class",
    "prefix": "edc",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export default function": {
    "body": "export default function ${1:$TM_FILENAME_BASE} ($2) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Statement: export default function",
    "prefix": "edf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export default {\n\t\n}": {
    "body": "export default {\n\t$0\n}",
    "description": "Statement: export default {}",
    "prefix": "edo",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export named arrow function": {
    "body": "export const ${1:$TM_FILENAME_BASE} = ($2) => {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Statement: export named arrow function",
    "prefix": "ena",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export named class": {
    "body": "export class ${1:$TM_FILENAME_BASE} {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Statement: export named class",
    "prefix": "enc",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export named function": {
    "body": "export function ${1:$TM_FILENAME_BASE}($2) {\n\t${0:$TM_SELECTED_TEXT}\n}",
    "description": "Statement: export named function",
    "prefix": "enf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export named variable": {
    "body": "export const ${1:$TM_FILENAME_BASE} = ",
    "description": "Statement: export named variable",
    "prefix": "env",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export submodule": {
    "body": "export * from '$1'",
    "description": "Statement: export submodule",
    "prefix": "esm",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: export { $2 } from '$1'": {
    "body": "export { $2 } from '$1'",
    "description": "Statement: export { $2 } from '$1'",
    "prefix": "esd",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: import * as namespace": {
    "body": "import * as ${2:${1/.+/${0:/capitalize}/}} from '$1'",
    "description": "Statement: import * as namespace",
    "prefix": "imn",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: import default": {
    "body": "import ${2:$1} from '$1'",
    "description": "Statement: import default",
    "prefix": "imd",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Statement: import module": {
    "body": "import '$1'",
    "description": "Statement: import module",
    "prefix": "imm",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Template String": {
    "body": "`\\${${1:$TM_SELECTED_TEXT}}`",
    "description": "Template String",
    "prefix": "tpl",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Ternary Expression": {
    "body": "($1 ? ${2:$TM_SELECTED_TEXT} : $3)",
    "description": "Ternary Expression",
    "prefix": "ter",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Arrow Function in Object": {
    "body": "{\n\t\t${0:${TM_SELECTED_TEXT/^\\s*(?:(?:const|let|var)\\s*([\\w$]+)\\s*=\\s*)?(async[ \\t])?[ \\t]*(\\(.*?\\)|[\\w$]+)\\s*=>\\s*(?:({.*?)|([^{].*?))\\s*$/$2${1:-next}($3) $4${5:+{\\n\\treturn }$5${5:+\\n\\}}/s}}\n}",
    "description": "Transform: Arrow Function in Object",
    "prefix": "aio",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Arrow Function in Object as Property": {
    "body": "{\n\t\t${0:${TM_SELECTED_TEXT/^\\s*(?:(?:const|let|var)\\s*([\\w$]+)\\s*=\\s*)?((?:async[ \\t]+)?(?:\\(.*?\\)|[\\w$]+)\\s*=>\\s*.*?)\\s*$/${1:-next}: $2/s}}\n}",
    "description": "Transform: Arrow Function in Object as Property",
    "prefix": "aiop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Arrow Function Property to Arrow Function": {
    "body": "${1|const,let,var|} ${0:${TM_SELECTED_TEXT/^\\s*([\\w$]*)\\s*:\\s*((?:async[ \\t])?[ \\t]*(?:\\(.*?\\)|[\\w$]+)\\s*=>\\s*(?:.*?))\\s*$/$1 = $2/s}}",
    "description": "Transform: Arrow Function Property to Arrow Function",
    "prefix": "ap2a",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Arrow Function to Function": {
    "body": "${0:${TM_SELECTED_TEXT/^\\s*(?:(?:const|let|var)\\s*([\\w$]+)\\s*=\\s*)?(async[ \\t])?[ \\t]*(\\(.*?\\)|[\\w$]+)\\s*=>\\s*(?:({.*?)|([^{].*?))\\s*$/$2function $1($3) $4${5:+{\\n\\treturn }$5${5:+\\n\\}}/s}}",
    "description": "Transform: Arrow Function to Function",
    "prefix": "a2f",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Function in Object": {
    "body": "{\n\t${0:${TM_SELECTED_TEXT/^\\s*(async[ \\t])?[ \\t]*function\\s*(?:(\\*\\s+[\\w$]*)|(\\s+[\\w$]*))\\s*\\((.*?)\\)\\s*\\{(.*?)\\}\\s*$/$1${2:+[Symbol.iterator]}$3($4) {$5}/s}\n}}",
    "description": "Transform: Function in Object",
    "prefix": "fio",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Function in Object as Property": {
    "body": "{\n\t${0:${TM_SELECTED_TEXT/^\\s*(async[ \\t])?[ \\t]*function\\s*(?:(\\*\\s+[\\w$]*)|(\\s+[\\w$]*))\\s*\\((.*?)\\)\\s*\\{(.*?)\\}\\s*$/${2:+[Symbol.iterator]}$3: $1($4) => {$5}/s}\n}}",
    "description": "Transform: Function in Object as Property",
    "prefix": "fiop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Function to Arrow Function": {
    "body": "${1|const,let,var|} ${0:${TM_SELECTED_TEXT/^\\s*(async[ \\t])?[ \\t]*function\\s*\\*?\\s+([\\w$]*)\\s*\\((.*?)\\)\\s*\\{(.*?)\\}\\s*$/${2:-next} = $1($3) => {$4}/s}}",
    "description": "Transform: Function to Arrow Function",
    "prefix": "f2a",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "Transform: Method to Function": {
    "body": "${0:${TM_SELECTED_TEXT/^\\s*(async[ \\t])?[ \\t]*(?:(\\[Symbol.iterator\\])|([\\w$]*))\\s*(\\(.*?\\)\\s*\\{.*?\\})\\s*$/$1function${2:+*} $3$4/s}}",
    "description": "Transform: Method to Function",
    "prefix": "m2f",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  }
}
